create database Day14
use  Day14
-- Create Students tableCREATE TABLE Students (    student_id INT PRIMARY KEY,    student_name VARCHAR(50),    email VARCHAR(50),    major VARCHAR(50),    enrollment_year INT);-- Create Courses tableCREATE TABLE Courses (    course_id INT PRIMARY KEY,    course_name VARCHAR(50),    credit_hours INT,    department VARCHAR(50));-- Create StudentCourses table for enrollmentCREATE TABLE StudentCourses (    enrollment_id INT PRIMARY KEY,    student_id INT,    course_id INT,    semester VARCHAR(20),    grade CHAR(2),    FOREIGN KEY (student_id) REFERENCES Students(student_id),    FOREIGN KEY (course_id) REFERENCES Courses(course_id));
-- Insert sample dataINSERT INTO Students VALUES (1, 'John Doe', 'john@example.com', 'Computer Science', 2020),(2, 'Jane Smith', 'jane@example.com', 'Mathematics', 2021),(3, 'Mike Johnson', 'mike@example.com', 'Physics', 2020);INSERT INTO Courses VALUES(101, 'Database Systems', 3, 'CS'),(102, 'Calculus II', 4, 'MATH'),(103, 'Quantum Physics', 4, 'PHYSICS');INSERT INTO StudentCourses VALUES(1, 1, 101, 'Fall 2023', 'A'),(2, 1, 102, 'Spring 2024', 'B'),(3, 2, 102, 'Fall 2023', 'A'),(4, 3, 103, 'Spring 2024', 'B+');select * from  Students,Courses,StudentCourses--simple viewcreate view CS_Students as select student_id,student_name,emailfrom Students where major='Computer Science';select * from CS_Students;--complex view (from multiple table with joins)create view dbo.StudentEnrollment asselect s.student_name,c.course_name,sc.semester,sc.gradefrom dbo.Students sjoin dbo.StudentCourses sc on sc.student_id=s.student_idjoin dbo.Courses c on sc.course_id=c.course_id;update StudentCoursesset grade='A'where student_id=3 and course_id=103select * from StudentEnrollment;--altering a view(MSSQL uses CREAT OR ALTER in newer version)--for older version ,we need to Drop and CREATEif exists (select * from sys.views where name='CS_Student' and schema_ID=SCHEMA_ID('dbo'))Drop view dbo.CS_Students;-- view meta data in MS SQL--GET VIEW DEFINATIONselect OBJECT_DEFINITION(object_id('dbo.CS_Students')) as ViewDefination;--list all view in data baseselect name as ViewName, create_Date,modify_Date from sys.viewswhere is_ms_shipped=0order by name;--indexing on above table for faster lookupcreate nonclustered index IX_STUDENT_EMAIL on Students(email) ; --student emailcreate nonclustered index IXStudentMAJOR_Year on Students(major,enrollment_year);--creating a unique index on email to prevent duplicates..create unique index UQ_Student_Email on Students(email) where email is not null;--create a non clustered Index on StudentCourses for common query patternscreate nonclustered index IX_StudentCourses_Grade on StudentCourses(semester,grade)--Analysing index usage--checking existing indexesselect t.name as TableName,i.name as IndexName,i.type_desc as IndexType,i.is_unique as IsUniquefrom sys.indexes i join sys.tables t on i.object_id=t.object_idwhere i.name is not null;--sample query based on indexingselect * from Students where email='john@example.com';--using composite indexselect * from Students where major='Computer Science' and enrollment_year='2020';--most views in mssql server are read only by design ? justify how??--only simple views meetinng strict criteria can  be updated directly ? how?select * from CS_Students --simple updatable view(meets all criteria)select * from StudentEnrollment; --view with Join(Not directly Updatable) create view UniqueMajor asselect distinct major from Students;select * from UniqueMajor--bellow operation is failed because --distinct create a derived result set--sql server cant map updates back to the base tableBegin try print 'Updating Going ON'update UniqueMajor set major='Computer sc' where major='Computer Science';END TRY--view with computed columncreate view StudentNameLength ASselect student_id,student_name,LEN(student_name) as name_length from Students;SELECT * FROM StudentNameLength;